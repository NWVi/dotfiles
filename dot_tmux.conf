# vim:ft=tmux:foldmethod=marker

# SETTINGS {{{

# True color support
set -g default-terminal "screen-256color"
set -as terminal-features ",xterm-kitty:RGB"

# Enable mouse mode (tmux 2.1 and above)
set -g mouse on

# don't rename windows automatically
# renumber windows automatically when one is closed
set -g allow-rename off
set -g renumber-windows on

# Settings for vim
set -g focus-events on    # used for nvim 'autoread'
set -sg escape-time 0     # register escape key immediately

# }}}

# KEYBINDINGS {{{

# prefix is 'C-b'

# keybindings for plugin manager
#   prefix + I: install plugins
#   prefix + U: update plugins
#   prefix + alt + u: remove/uninstall plugins

# keybinds for restoring tmux env
#   prefix + ctrl + s: save
#   prefix + ctrl + r: restore

# Split panes using h and v
bind h split-window -v
bind v split-window -h
unbind '"'
unbind %

# Smart pane switching with awareness of Vim splits. {{{
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Smart pane resizing with awareness of Neovim splits.
bind -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l
# }}}

# Tmux sessionizer
bind -r f run-shell "tmux neww ~/.local/scripts/tmux-sessionizer"

# Reload config file
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Set current pane path as working directory
bind = attach -c "#{pane_current_path}" \; display-message "Working directory set to #{pane_current_path}"

# }}}

# DESIGN CHANGES {{{

# make things quiet
set -g visual-bell off
set -g bell-action none
set -g visual-silence off
set -g visual-activity off
setw -g monitor-activity off

## Status bar design
# status line
set -g status-justify left
set -ga status-interval 2

# Info on left (I don't have a session display for now)
set -g status-left ''

setw -g clock-mode-colour yellow
setw -g mode-style 'fg=black bg=white bold'

# pane border
set -g pane-border-style 'fg=white'
set -g pane-active-border-style 'fg=green'

# statusbar
set -g status-position top
set -g status-justify left
set -g status-style 'fg=white bg=black'
set -g status-left ''
set -g status-right '#[fg=black bg=yellow bold] %Y-%m-%d #[bg=green] %H:%M '
set -g status-right-length 50
set -g status-left-length 20

# Active
setw -g window-status-current-style 'fg=red bg=green bold'
setw -g window-status-current-format ' #I #[fg=black]#W #[fg=red]#F '
# Inactive
setw -g window-status-style 'fg=yellow'
setw -g window-status-format ' #I #[fg=white]#W #[fg=red]#F '
# Bell
setw -g window-status-bell-style 'fg=white bg=red bold'

# messages
set -g message-style 'fg=black bg=white bold'

# }}}

# PLUGINS {{{

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect' # save and restore
set -g @plugin 'tmux-plugins/tmux-continuum' # automatically save and restore

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# }}}
